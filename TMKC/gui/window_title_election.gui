
######################################################
################# ELECTION WINDOW ####################
######################################################
window = {
	name = "title_election"
	movable = no
	allow_outside = yes
	layer = windows_layer

	using = Window_Size_Sidebar
	using = Window_Background_Sidebar

	state = {
		name = _show
		position = { 0 0 }
		on_start = "[GetVariableSystem.Clear( 'display_allegiance' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		position_x = -60
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"

		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard

	}

	state = {
		name = hide
		next = _hide
		position_x = 0
		trigger_when = "[GetVariableSystem.Exists( 'county_view_open' )]"
	}

	vbox = {
		datacontext = "[SuccessionElectionWindow.GetTitle.GetPlayerNominee]"
		datacontext = "[SuccessionElectionWindow.GetTitle]"
		using = Window_Margins_Sidebar

		spacing = 10

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		### Header
		widget = {
			minimumsize = { 0 140 }

			hbox = {
				name = "header_area"
				minimumsize = { 0 130 }
				margin = { 10 0 }
				margin_top = 10

				coa_title_big_crown = {
					datacontext = "[SuccessionElectionWindow.GetTitle]"
					tooltip = "[Title.GetCOADeJureTooltip]"
				}

				background = {
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					margin_bottom = 20
					spriteType = Corneredtiled
					spriteborder = { 0 18 }
					texture_density = 2
				}

				vbox = {
					margin = { 10 5 }
					layoutpolicy_horizontal = expanding
					spacing = 5

					vbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[SuccessionElectionWindow.GetTitle.GetNameNoTooltip|U]"
							align = left
							
							default_format = "#medium;color_goldy_yellow"
							using = Font_Size_Big
							using = Font_Type_Flavor
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "SUCCESSION_ELECTION_WINDOW_TITLE"
							align = left
							default_format = "#high"
							using = Font_Size_Big
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "SUCCESSION_ELECTION_WINDOW_LAW"
							align = left
							default_format = "#low"
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "SUCCESSION_ELECTION_WINDOW_RULES_ELECTORS"
							tooltip = "[SuccessionElectionWindow.GetElectorsGroupingTooltip]"
							align = left
							default_format = "#low"
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							align = left
							text = "SUCCESSION_ELECTION_WINDOW_RULES_CANDIDATES"
							tooltip = "[SuccessionElectionWindow.GetCandidatesGroupingTooltip]"
							default_format = "#low"
						}
						hbox = {
							tooltip = "[SuccessionElectionWindow.GetElectorVoteStrengthBreakdown( GetPlayer )]"

							text_single = {
								text = "SUCCESSION_ELECTION_WINDOW_MY_VOTING_STRENGTH"
								max_width = 180
								default_format = "#low"
							}

							vote_strength_icon = {}

							text_single = {
								text = "[SuccessionElectionWindow.GetVoteStrength( GetPlayer )|V]"
								max_width = 30
								default_format = "#low"
								using = Font_Size_Medium
							}
						}
					}
				}
			}

			buttons_window_control = {
				parentanchor = top|right

				blockoverride "button_close" {
					onclick = "[SuccessionElectionWindow.Close]"
				}

				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
				}
			}
		}

		### No Candidate is chosen
	#	vbox = {
	#		layoutpolicy_horizontal = expanding
	#		layoutpolicy_vertical = expanding
	#		margin_top = 20
	#		maximumsize = { 0 120 }
	#		visible = "[And( Not( Character.IsValid ), Title.IsPlayerElector )]"

	#		spacing = 5

	#		text_label_center = {
	#			text = "ELECTION_NO_CANDIDATE"
	#			default_format = "#low"
	#		}

			expand = {}

	#		text_single = {
	#			text = "SUCCESSION_ELECTION_WINDOW_SELECT_CANDIDATE_INFO"
	#			default_format = "#I"
	#		}

	#		hbox = {
	#			tooltip = "[SuccessionElectionWindow.GetElectorVoteStrengthBreakdown( GetPlayer )]"
	#			spacing = 5

	#			text_single = {
	#				text = "SUCCESSION_ELECTION_WINDOW_MY_VOTING_STRENGTH"
	#				max_width = 180
	#				default_format = "#low"
	#			}

	#			vote_strength_icon = {}

	#			text_single = {
	#				text = "[SuccessionElectionWindow.GetVoteStrength( GetPlayer )|V]"
	#				max_width = 30
	#				default_format = "#low"
	#				using = Font_Size_Medium
	#			}
	#		}
	#	}

	#	vbox = {
	#		layoutpolicy_horizontal = expanding
	#		visible = "[Not( Or( Character.IsValid, Title.IsPlayerElector ) )]"
	#		margin_top = 20

	#		text_single = {
	#			text = "SUCCESSION_ELECTION_WINDOW_NOT_ELECTOR"
	#			default_format = "#warning"
	#		}
	#	}

		### My Candidate
		hbox = {
			name = "my_candidate"
			datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"
			visible = "[Character.IsValid]"
			layoutpolicy_horizontal = expanding
			#margin = { 70 0 }
			margin = { 50 0 }
			#margin_top = 20
			margin_top = 30
			margin_bottom = -13

			state = {
				name = _show

				duration = 0.2

				animation = {
					size = { 0 500 }
					bezier = { 0 0.5 0.5 1 }
				}

				animation = {
					alpha = 1
					bezier = { 0.5 0 1 0.5 }
				}
			}

			state = {
				name = _hide
				size = { 0 0 }
				alpha = 0
			}

			state = {
				name = "add_candidate"
				alpha = 0
				duration = 0.2
				next = "b"
				using = Animation_Curve_Default
			}

			state = {
				name = "b"
				alpha = 1
				duration = 0.2
				using = Animation_Curve_Default
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				
				vbox = {
					spacer = { size = { 0 10 }}
					spacing = 5

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE"
					}

					text_single = {
						text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_INFO"
						default_format = "#high"
						using = Font_Size_Big
					}

					text_single = {
						text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_STANCE"
					}

					text_single = {
						text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_NOT_MY_DYNASTY"
						visible = "[Not( ObjectsEqual( Character.GetDynasty, GetPlayer.GetDynasty ) )]"
					}

					expand = {
						minimumsize = { 0 10 }
					}

					hbox = {
						spacing = 20
						margin_top = 10

						text_single = {
							datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"
							text = "SUCCESSION_ELECTION_WINDOW_CANDIDATE_RANK"
							using = Font_Size_Medium
						}

						hbox = {
							spacing = 4
							tooltip = "SUCCESSION_ELECTION_WINDOW_CANDIDATE_SCORE"

							vote_amount_icon = {}

							text_single = {
								text = "[SuccessionElectionWindowCandidate.GetScore|V]"
								using = Font_Size_Medium
							}
						}
					}

					hbox = {
						tooltip = "[SuccessionElectionWindow.GetElectorVoteStrengthBreakdown( GetPlayer )]"

						text_single = {
							text = "SUCCESSION_ELECTION_WINDOW_MY_VOTING_STRENGTH"
							max_width = 180
							default_format = "#low"
						}

						vote_strength_icon = {}

						text_single = {
							text = "[SuccessionElectionWindow.GetVoteStrength( GetPlayer )|V]"
							max_width = 30
							default_format = "#low"
							using = Font_Size_Medium
						}
					}
				}
				
				expand = {}
			}
			
			spacer = { size = { 50 0 }}
			
			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				
				spacer = { size = { 0 10 }}
				
				container = {
					#margin_top = 50
					#minimumsize = { 50 300}
					#position = { 0 130 }
					datacontext = "[Character.GetHouse]"
					datacontext = "[GetCharacter]"
					datacontext = "[GetCharacter]"
					datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					size = { 250 250 }
					
					icon = {
						#parentanchor = bottom|hcenter
						size = { 250 250 }
						texture = "gfx/interface/colors/white.dds"
						color = { 0.22 0.2 0.22 1 }

						modify_texture = {
							texture = "gfx/interface/frontend/mask_coa_flag.dds"
							blend_mode = alphamultiply
						}
					}

					coat_of_arms_icon = { #Dynasty
						datacontext = "[Character.GetDynasty]"

						parentanchor = bottom|hcenter
						size = { 250 250 }
						
						coat_of_arms = "[DynastyHouse.GetHouseCoA.GetTexture('(int32)256','(int32)256')]"
						coat_of_arms_slot = "[DynastyHouse.GetHouseCoA.GetSlot('(int32)256','(int32)256')]"
						coat_of_arms_mask = "gfx/interface/frontend/mask_coa_flag_2.dds"
						#coat_of_arms_mask = "gfx/interface/colors/white.dds"

						modify_texture = {
							texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
							blend_mode = overlay
							spritetype = corneredTiled
							alpha = 0.5
						}
						
						using = CoA_House_Defaults
						onclick = "[DefaultOnHouseCoatOfArmsClick(DynastyHouse.GetID)]"
					}

					
					portrait_body = {
					#portrait_shoulders = {
						position = { 20 -20}
						
						state = {
							name = "on_player_election_nomination"
							next = "nomination_shown"
							alpha = 0.5
						}

						state = {
							name = "nomination_shown"
							alpha = 1
							duration = 0.5
							using = Animation_Curve_Default
						}
						
						blockoverride "portrait_texture"
						{
							portrait_texture = "[Character.GetAnimatedPortrait('environment_body', 'camera_body', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
						}
						blockoverride "opinion_box" {}
						blockoverride "status_icons" {}
						blockoverride "coa" { }
						blockoverride "mask"
						{
							mask = "gfx/portraits/portrait_mask_council.dds"
						}
					}
				}
			}
		}
		expand = {}
		expand = {}
		###LES ONGLETS
		## Candidates list
		hbox = {
			layoutpolicy_horizontal = expanding
			
			button_tab = {
				name = "show_candidate_button"
				layoutpolicy_horizontal = expanding
				#onclick = "[GetVariableSystem.Toggle('election_view_candidates')]"
				#down = "[Not(GetVariableSystem.Exists('election_view_candidates'))]"
				onclick = "[GetVariableSystem.Set( 'election_view_tabs', 'candidates' )]"
				down = "[GetVariableSystem.HasValue( 'election_view_tabs', 'candidates' )]"
				hbox = {
					text_single = {
						align = center
						text = "SUCCESSION_ELECTION_WINDOW_CANDIDATES"
						default_format = "#low"
						visible = "[Not( GetVariableSystem.HasValue( 'election_view_tabs', 'candidates' ) )]"
					}
				}				
				hbox = {
					text_single = {
						align = center
						text = "SUCCESSION_ELECTION_WINDOW_CANDIDATES"
						default_format = "#high"
						visible = "[GetVariableSystem.HasValue( 'election_view_tabs', 'candidates' )]"
					}
				}
			}
			button_tab = {
				name = "show_electorate_button"
				layoutpolicy_horizontal = expanding
				#onclick = "[GetVariableSystem.Toggle('election_view_candidates')]"
				#down = "[GetVariableSystem.Exists('election_view_candidates')]"
				onclick = "[GetVariableSystem.Set( 'election_view_tabs', 'electorate' )]"
				down = "[GetVariableSystem.HasValue( 'election_view_tabs', 'electorate' )]"
				hbox = {
					text_single = {
						align = center
						text = "SUCCESSION_ELECTION_WINDOW_ELECTORATE"
						default_format = "#low"
						visible = "[Not( GetVariableSystem.HasValue( 'election_view_tabs', 'electorate' ) )]"
					}
				}				
				hbox = {
					text_single = {
						align = center
						text = "SUCCESSION_ELECTION_WINDOW_ELECTORATE"
						default_format = "#high"
						visible = "[GetVariableSystem.HasValue( 'election_view_tabs', 'electorate' )]"
					}
				}
			}
			button_tab = {
				name = "show_electors_button"
				layoutpolicy_horizontal = expanding
				#onclick = "[GetVariableSystem.Toggle('election_view_candidates')]"
				#down = "[GetVariableSystem.Exists('election_view_candidates')]"
				onclick = "[GetVariableSystem.Set( 'election_view_tabs', 'electors' )]"
				down = "[GetVariableSystem.HasValue( 'election_view_tabs', 'electors' )]"
				hbox = {
					text_single = {
						align = center
						text = "SUCCESSION_ELECTION_WINDOW_ELECTORS"
						default_format = "#low"
						visible = "[Not( GetVariableSystem.HasValue( 'election_view_tabs', 'electors' ) )]"
					}
				}				
				hbox = {
					text_single = {
						align = center
						text = "SUCCESSION_ELECTION_WINDOW_ELECTORS"
						default_format = "#high"
						visible = "[GetVariableSystem.HasValue( 'election_view_tabs', 'electors' )]"
					}
				}
			}
		}
		expand = {}
		
		#ONGLET 1
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_bottom = 5
			spacing = 10
			visible = "[GetVariableSystem.HasValue( 'election_view_tabs', 'candidates' )]"
			#visible = "[Not(GetVariableSystem.Exists('election_view_candidates'))]"
			datacontext = "[SuccessionElectionWindow.GetCandidates]"
			
			### No Candidate is chosen
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 20
				maximumsize = { 0 120 }
				visible = "[And( Not( Character.IsValid ), Title.IsPlayerElector )]"

				spacing = 5

				text_label_center = {
					text = "ELECTION_NO_CANDIDATE"
					default_format = "#low"
				}

				expand = {}

				text_single = {
					text = "SUCCESSION_ELECTION_WINDOW_SELECT_CANDIDATE_INFO"
					default_format = "#I"
				}

				hbox = {
					tooltip = "[SuccessionElectionWindow.GetElectorVoteStrengthBreakdown( GetPlayer )]"
					spacing = 5

					text_single = {
						text = "SUCCESSION_ELECTION_WINDOW_MY_VOTING_STRENGTH"
						max_width = 180
						default_format = "#low"
					}

					vote_strength_icon = {}

					text_single = {
						text = "[SuccessionElectionWindow.GetVoteStrength( GetPlayer )|V]"
						max_width = 30
						default_format = "#low"
						using = Font_Size_Medium
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Not( Or( Character.IsValid, Title.IsPlayerElector ) )]"
				#margin_top = 20

				text_single = {
					text = "SUCCESSION_ELECTION_WINDOW_NOT_ELECTOR"
					default_format = "#warning"
				}
			}
			#expand = {}
			
			hbox_list_sort_buttons = {
				layoutpolicy_horizontal = expanding
			}
		
			
			scrollbox = {
				name = "candiates_list"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content" {
					name = "candidates"

					fixedgridbox = {
						datamodel = "[CharacterSelectionList.GetList]"
						datacontext = "[SuccessionElectionWindow.GetTitle]"
						addcolumn = 580
						addrow = 180
						#addrow = 170
						setitemsizefromcell = yes
						datamodel_reuse_widgets = yes

						item = {
							widget = {
								size = { 0 160 }
								datacontext = "[CharacterListItem.GetCharacter]"
								datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"

								vbox = {
									name = "candidate"
									margin_top = 5

									background = {
										using = Background_Area
										margin_left = 10
									}

									background = {
										visible = "[EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
										spriteType = Corneredstretched
										spriteborder = { 15 15 }
										using = Color_Blue
										alpha = 0.9
										texture = "gfx/interface/component_masks/mask_frame.dds"
										
										margin = { 0 -28 }
										margin_left = 10
										margin_top = 3

										modify_texture = {
											blend_mode = alphamultiply
											alpha = 0.9
											mirror = horizontal
											texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
										}

										modify_texture = {
											mirror = vertical
											blend_mode = alphamultiply
											texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
											alpha = 0.7
										}
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										vbox = {
											background = {
												visible = "[EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
												spriteType = Corneredtiled
												using = Color_Blue
												alpha = 0.5
												texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
												
												margin = { 0 -31 }
												margin_left = -130
												margin_right = 440

												modify_texture = {
													blend_mode = alphamultiply
													alpha = 0.7
													mirror = horizontal
													texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
												}
												modify_texture = {
													blend_mode = alphamultiply
													alpha = 0.7
													#mirror = horizontal
													texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
												}
												
												modify_texture = {
													spriteType = Corneredtiled
													spriteborder = { 15 15 }
													blend_mode = alphamultiply
													texture = "gfx/interface/component_masks/mask_texture_01.dds"
												}

												modify_texture = {
													#mirror = vertical
													blend_mode = alphamultiply
													texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
												}
											}
											vbox = {
												layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding
												spacing = 0
												
												hbox = {
													layoutpolicy_horizontal = expanding
													align = left
													margin_bottom = -15
													
													background = {
														using = Background_Area
														margin_left = 20
														margin_bottom = 25
														margin_top = 7
													}
													background = {
														visible = "[EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
															
														using = Background_Area
														margin_left = 20
														margin_bottom = 25
														margin_top = 7
														alpha = 0.2
													}

													background = {
														visible = "[NotEqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
															
														using = Background_Area
														margin_left = 20
														margin_bottom = 25
														margin_top = 7
														alpha = 0.7
													}
													container = {
														visible = "[NotEqualTo_uint32( SuccessionElectionWindowCandidate.GetScore, '(uint32)0' )]"
														text_single = {
															datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"
															visible = "[EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
															text = "SUCCESSION_ELECTION_WINDOW_CANDIDATE_RANK1"
															using = Font_Size_Medium
														}
														text_single = {
															datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"
															visible = "[NotEqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
															text = "SUCCESSION_ELECTION_WINDOW_CANDIDATE_RANKED"
															using = Font_Size_Medium
														}
													}
													expand = {}
													container = {
														visible = "[EqualTo_uint32( SuccessionElectionWindowCandidate.GetScore, '(uint32)0' )]"
														text_single = {
															datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"
															visible = "[EqualTo_uint32( SuccessionElectionWindowCandidate.GetScore, '(uint32)0' )]"
															text = "SUCCESSION_ELECTION_WINDOW_CANDIDATE_RANK0"
															#using = Font_Size_Medium
														}
													}
													expand = {}
												}
												vbox = {
													layoutpolicy_vertical = expanding
													layoutpolicy_horizontal = expanding
													margin_left = -10
													margin_top = 22
													margin_bottom = -20
													
													container = {
														size = {150 200}
														#margin_top = 20
														coat_of_arms_icon = { #Dynasty
															datacontext = "[Character.GetHouse]"

															#parentanchor = bottom|hcenter
															size = { 160 150 }
															
															
															coat_of_arms = "[DynastyHouse.GetHouseCoA.GetTexture('(int32)256','(int32)256')]"
															coat_of_arms_slot = "[DynastyHouse.GetHouseCoA.GetSlot('(int32)256','(int32)256')]"
															coat_of_arms_mask = "gfx/interface/frontend/mask_coa_flag_2.dds"
															#coat_of_arms_mask = "gfx/interface/colors/white.dds"

															modify_texture = {
																texture = "gfx/interface/coat_of_arms/coa_overlay.dds"
																blend_mode = overlay
																spritetype = corneredTiled
																alpha = 0.5
															}
															
															using = CoA_House_Defaults
															using = Mask_Rough_Edges
															modify_texture = {
																blend_mode = alphamultiply
																alpha = 0.7
																mirror = horizontal
																texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
															}
															onclick = "[DefaultOnHouseCoatOfArmsClick(DynastyHouse.GetID)]"
														}
														portrait_shoulders = {
															position = { 10 -10}
														}
													}
												
												expand = {}
												}
											}
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding

											vbox = {
												layoutpolicy_horizontal = expanding
												margin_left = 5
												spacing = 5

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 10

													background = {
														using = Background_Area
														margin = { 0 5 }
														margin_left = 10
													}

													container = {
														visible = no
														visible = "[NotEqualTo_uint32( SuccessionElectionWindowCandidate.GetScore, '(uint32)0' )]"
														#visible = "[EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)0' )]"

														text_single = {
															text = "[SuccessionElectionWindowCandidate.GetElectionRank|V]"
															default_format = "#bold"
															using = Font_Size_Big
															visible = "[EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
															align = top
														}

														text_single = {
															text = "[SuccessionElectionWindowCandidate.GetElectionRank|V]"
															default_format = "#bold"
															visible = "[NotEqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
															margin_bottom = 2
														}
													}

													

													text_single = {
														text = "[Character.GetUINameNotMeNoTooltip]"
														layoutpolicy_horizontal = expanding
														autoresize = no
														default_format = "#low"
													}

													#### SKILLS
													hbox_skills_grid = {
														margin_right = 20
													}
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 5

													hbox = {
														using = character_age_or_death_text
														spacing = 2
													}

													text_single = {
														name = "character_relation_to_you"
														text = "[Character.GetRelationToString( GetPlayer )|E]"
														tooltip = "EXTENDED_RELATIONS_TOOLTIP"
														max_width = 380
														align = nobaseline
														visible = "[Character.HasRelationTo( GetPlayer )]"
														layoutpolicy_horizontal = expanding
													}

													text_single = {
														raw_text = "#D Relevance: [SuccessionElectionWindowCandidate.GetRelevance]#!"
														visible = "[InDebugMode]"
														margin_right = 20
														tooltipwidget = {
															widget_value_breakdown_tooltip = {
																datacontext = "[SuccessionElectionWindow.GetRelevanceBreakdown( Character.Self )]"
															}
														}
													}
													expand = {}
												}
											}

											#expand = {}

											#hbox = {
											#	layoutpolicy_horizontal = expanding
											#	layoutpolicy_vertical = expanding
											#	
											#	vbox = {
											#		#layoutpolicy_vertical = expanding
											#		# Dynasty
											#		#widget = {
											#		layoutpolicy_vertical = expanding
											#		layoutpolicy_horizontal = expanding
											#		#minimumsize = { 50 50 }
											#		#size = { 80 60 }

											#		coa_house_medium = {
											#			datacontext = "[Character.GetHouse]"
											#			parentanchor = top
											#			#scale = 0.7
											#			#minimumsize = { 80 80 }
											#			align = center
											#		}
											#	}
										
											vbox = {
												layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding
												ignoreinvisible = yes
												text_single = {
													margin_top = -3
													margin_bottom = -5
													visible = "[And( Not( EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' ) ), EqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID ) )]"
													text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_STANCEneg"
												}
												text_single = {
													margin_top = -3
													margin_bottom = -5
													visible = "[And( EqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID ), EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' ) )]"
													text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_STANCEpos"
												}
												text_single = {
													margin_top = -3
													margin_bottom = -5
													#visible = "[Not( EqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID )]"
													visible = "[Not( EqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID ) )]"
													text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE_STANCEne"
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													margin_left = 10
													margin_right = 20

													hbox = {
														minimumsize = { 350 30 }
														layoutpolicy_horizontal = expanding
														margin = { 5 5 }

														background = {
															using = Background_Area_Dark
															margin = { 3 3 }
															alpha = 0.5
														}
														# Traits
														vbox = {
															layoutpolicy_vertical = expanding
															layoutpolicy_horizontal = expanding
															#margin = { 10 0 }
															minimumsize = { 350 30 }

															fixedgridbox = {
																name = "traits_grid_5"
																datamodel = "[CharacterListItem.GetTraits]"
																flipdirection = yes
																addcolumn = 30
																addrow = 28
																parentanchor = top|center
																
																block "gridbox_items"
																{
																	datamodel_wrap = 10
																	maxverticalslots = 1
																}

																item = {
																	icon_trait = {
																		visible = "[Trait.IsValid]"

																		blockoverride "icon_size"
																		{
																			size = { 30 30 }
																		}

																		blockoverride "tooltip_placement"
																		{
																			using = tooltip_se
																		}

																		blockoverride "glow_radius"
																		{
																			glow_radius = 3
																		}
																	}
																}
															}

															expand = {}
														}
														
													}
												}
												expand = {}
												
												hbox = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													#margin_left = 10
													margin_right = 20

													hbox = {
														layoutpolicy_horizontal = expanding
														margin = { 5 0 }

														background = {
															using = Background_Area_Dark
															margin = { 3 3 }
															alpha = 0.5
														}

														### Vote button


														# Dynasty
														#widget = {
														#	layoutpolicy_vertical = expanding
														#	size = { 45 40 }

														#	coa_house_small = {
														#		datacontext = "[Character.GetHouse]"
														#		parentanchor = center
														#		#scale = 0.7
														#	}
														#}

														#ex TRAITS

														#expand = {}

														

														#expand = {}

														divider_light = {
															visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
															layoutpolicy_vertical = expanding
															minimumsize = { 7 0 }
															alpha = 0.5
														}

														hbox = {
															#margin_left = 5
															minimumsize = { 60 0 }
															icon = {
																texture = "gfx/interface/icons/religion_generic.dds"
																datacontext = "[Character.GetFaith]"
																size = { 45 45 }
																tooltipwidget = { faith_tooltip_click = {} }
																alpha = 0.9
		
															}
														}
														divider_light = {
															visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
															layoutpolicy_vertical = expanding
															alpha = 0.5
														}
														
														hbox = {
															#margin_left = 5
															minimumsize = { 60 0 }
															icon = {
																texture = "gfx/interface/icons/icon_culture.dds"
																datacontext = "[Character.GetCulture]"
																size = { 45 45 }
																#alpha = 0.5
																tooltipwidget = {
																	culture_tooltip_click = {}
																}
															}
														}
														divider_light = {
															visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
															layoutpolicy_vertical = expanding
															minimumsize = { 7 0 }
															alpha = 0.5
														}
														
														expand = {}
														
														divider_light = {
															visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
															layoutpolicy_vertical = expanding
															minimumsize = { 7 0 }
															alpha = 0.5
														}
														hbox = {
															margin = { 3 0 }
															#margin_left = 5
															minimumsize = { 70 0 }
															hbox = {
																visible = "[DataModelHasItems( SuccessionElectionWindowCandidate.GetElectors )]"
																tooltip = "SUCCESSION_ELECTION_WINDOW_CANDIDATE_SCORE"
																spacing = 2

																vote_amount_icon = {}

																text_single = {
																	text = "[SuccessionElectionWindowCandidate.GetScore|V]"
																	align = nobaseline
																}
															}

															hbox = {
																visible = "[IsDataModelEmpty( SuccessionElectionWindowCandidate.GetElectors )]"
																tooltip = "SUCCESSION_ELECTION_WINDOW_NO_ELECTORS"
																spacing = 2
																alpha = 0.3

																vote_amount_icon = {}

																text_single = {
																	text = "[SuccessionElectionWindowCandidate.GetScore|V]"
																}
															}
														}
														divider_light = {
															layoutpolicy_vertical = expanding
															alpha = 0.5
														}
														widget = {
															size = { 70 60 }

															button_round = {
																visible = "[And( Title.IsPlayerElector, NotEqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID ) )]"
																#visible = "[NotEqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID )]"
																
																enabled = "[And( Title.IsPlayerElector, NotEqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID ) )]"
																size = { 60 60 }
																parentanchor = center

																tooltip = NOMINATE_CANDIDATE_TOOLTIP
																onclick = "[PdxGuiTriggerAllAnimations('add_candidate')]"

																state = {
																	name = _mouse_click
																	delay = 0.15
																	on_finish = "[Title.OnPlayerNominatesSuccessor(Character.Self)]"
																}

																button_election_vote = {
																	alwaystransparent = yes
																	parentanchor = center
																	position = { 1 -1 }
																	size = { 40 40 }
																}
															}
															button_round = {
																#visible = "[And( Title.IsPlayerElector, NotEqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID ) )]"
																visible = "[NotEqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID )]"
																
																enabled = "[And( Title.IsPlayerElector, NotEqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID ) )]"
																size = { 60 60 }
																parentanchor = center

																tooltip = NOMINATE_CANDIDATE_TOOLTIP_CANT_VOTE
																onclick = "[PdxGuiTriggerAllAnimations('add_candidate')]"

																state = {
																	name = _mouse_click
																	delay = 0.15
																	on_finish = "[Title.OnPlayerNominatesSuccessor(Character.Self)]"
																}

																button_election_vote = {
																	alwaystransparent = yes
																	parentanchor = center
																	position = { 1 -1 }
																	size = { 40 40 }
																}
															}

															text_multi = {
																visible = "[EqualTo_uint32( Title.GetPlayerNominee.GetID, Character.GetID )]"
																text = "SUCCESSION_ELECTION_WINDOW_MY_CANDIDATE"
																position = { 0 -5 }
																parentanchor = center
																align = center
																default_format = "#low"
																max_width = 80
																autoresize = yes
															}
														}
														
													}
												}
												#expand = {}
											}
										}
										
									}
								}
							}
						}
					}
				}
			}
		}

		#ONGLET 2
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			#margin_top = 5
			#margin_bottom = 5
			spacing = 15
			visible = "[GetVariableSystem.HasValue( 'election_view_tabs', 'electorate' )]"
			#visible = "[GetVariableSystem.Exists('election_view_candidates')]"
			
			vbox = {
				layoutpolicy_vertical = expanding
				maximumsize = { 0 90 }
				vbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Not( Or( Character.IsValid, Title.IsPlayerElector ) )]"
					#margin_top = 20

					text_single = {
						text = "SUCCESSION_ELECTION_WINDOW_NOT_ELECTOR"
						default_format = "#warning"
					}
				}
						
				text_multi = { 
					text = "electorate_desc"
					default_format = "#low"
					align = bottom|hcenter
					autoresize = yes
					max_width = 450
				}
			}
			
			#hbox = {
			#	layoutpolicy_horizontal = expanding
			#	#layoutpolicy_vertical = expanding
			#	margin_bottom = 5
			#	#spacing = 10				
			#	button_standard = {	
			#		name = "show_electorate_button"
			#		layoutpolicy_horizontal = expanding
			#		onclick = "[GetVariableSystem.Toggle('election_view_electorate')]"
			#		#down = "[Not(GetVariableSystem.Toggle('election_view_electorate'))]"
#
			#		hbox = {
			#			text_single = {
			#				align = center
			#				text = "SUCCESSION_ELECTION_WINDOW_ELECTORATE"
			#				default_format = "#low"
			#				max_width = 100
			#			}
			#		}
			#	}
			#}

			vbox = {
				layoutpolicy_horizontal = expanding
				#layoutpolicy_vertical = expanding
				margin_top = 5
				#spacing = 10
				#minimumsize = { 600 700 }
				#maximumsize = { 600 600 }
				#visible = "[GetVariableSystem.Exists('election_view_electorate')]"

				background = {
					texture = "gfx/interface/illustrations/character_view/mediterranean.dds"
					#texture = "gfx/interface/illustrations/event_scenes/throneroom_west.dds"
					using = Mask_Rough_Edges
					#margin = {15 15}
					color = { 0.7 0.75 0.75 1}
					alpha = 0.8
					fittype = center
				}

				scrollbox = {
					minimumsize = { 550 520 }
					maximumsize = {600 520}
					#size = { 550 150 }
					name = "electorate2"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					#ignoreinvisible = yes
									
					blockoverride "scrollbox_content" {
						name = "electorate2"
						
						vbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding
							
							background = {
								texture = "gfx/interface/illustrations/character_view/west.dds"
								fittype = crop
								#texture = "gfx/interface/illustrations/event_scenes/throneroom_west.dds"
								using = Mask_Rough_Edges
								margin = {15 15}
								alpha = 0.8
							}							
							hbox = {
								spacer = { size = { 600 0 } }
							}							
							hbox = {
								#layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding
								
								icon = {
									size = { 50 50 }
									texture = "gfx/interface/icons/character_interactions/icon_liege.dds"
									tooltip = "elector_upper_nobility"
								}
								background = {
									using = Background_Area_Light
									margin = {7 7}
									using = Mask_Rough_Edges
									alpha = 0.8
								}
								
								spacer = { size = { 12 0 }}
								
								overlappingitembox = {
									name = "elector_title_holder" #title holder only
									minimumsize = { 50 75 }
																		
									background = {
										using = Background_Area_Dark
										margin = { 10 2 }
										using = Mask_Rough_Edges
										alpha = 0.8
									}
									
									datacontext = "[SuccessionElectionWindow.GetElectors]"
									datamodel = "[CharacterSelectionList.GetList]"
					
									item = {
										margin = { -50 5 }
										container = {
											datacontext = "[CharacterListItem.GetCharacter]"
											datacontext = "[CharacterListItem.GetCharacter.GetPrimaryTitle]"
											datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"
											#size = { 50 50 }
										
										#align = left	
											#spacer = { size = { 50 50 }}
											coa_realm_small_crown = {
												#visible = "[Character.GetGovernment.IsType('feudal_government')]"
												#visible = "[Character.GetTitleType.IsType('e_hre')]"
												#visible = "[Character.GetGovernment.IsType('theocracy_government')]"
												#visible = "[Character.GetGovernment.IsType('republic_government')]"
												#visible = "[Character.IsPowerfulVassal]"
												
												visible = "[ObjectsEqual( Character.GetPrimaryTitle, SuccessionElectionWindow.GetTitle )]" 
												
												#visible = "[Or( GreaterThanOrEqualTo_int32( Title.GetTierFrame, '(int32)6' ), Character.IsPowerfulVassal)]" #duchy+
												#visible = "[EqualTo_int32( Title.GetTierFrame, '(int32)6' )]" #county
												datacontext = "[SuccessionElectionWindowElector.GetElector.GetPrimaryTitle]"
												tooltip = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
											}
											
											#spacer = { size = { 50 50 }}
											#spacer = { size = { 50 50 }}
										}
									}
									#expand = {}
									#spacer = { size = { 50 50 }}
								}
								spacer = { size = { 25 0 }}
								
								overlappingitembox = {
									name = "elector_powerful_feudal" #feudal + powerful vassal, holder excluded
									#minimumsize = { 510 75 }
									size = { 435 75 }
									#maximumsize = { 410 75 }
									
									background = {
										using = Background_Area_Dark
										margin = { 10 2 }
										using = Mask_Rough_Edges
										alpha = 0.8
									}
									
									datacontext = "[SuccessionElectionWindow.GetElectors]"
									datamodel = "[CharacterSelectionList.GetList]"
									item = {
										container = {
											datacontext = "[CharacterListItem.GetCharacter]"
											datacontext = "[CharacterListItem.GetCharacter.GetPrimaryTitle]"
											datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"

											coa_realm_small_crown = {
												visible = "[And( Not( ObjectsEqual( Character.GetPrimaryTitle, SuccessionElectionWindow.GetTitle ) ), And( Character.GetGovernment.IsType('feudal_government'), Character.IsPowerfulVassal ))]"
												#visible = "[EqualTo_int32( Title.GetTierFrame, '(int32)6' )]" #county
												datacontext = "[SuccessionElectionWindowElector.GetElector.GetPrimaryTitle]"
												tooltip = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
											}
										}
									}
								}
								expand = {}
							}
							
							hbox = {
								#layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding
								
								icon = {
									size = { 50 50 }
									texture = "gfx/interface/icons/character_interactions/artisan_inspiration.dds"
									tooltip = "elector_upper_clergy"
								}
								
								background = {
									using = Background_Area_Light
									margin = {7 7}
									using = Mask_Rough_Edges
									alpha = 1
								}
								spacer = { size = { 12 0 }}
								
								overlappingitembox = {
									name = "GG2" #duke and above clergy
									#minimumsize = { 510 75 }
									size = { 510 75 }
									#maximumsize = { 510 75 }
																
									datacontext = "[SuccessionElectionWindow.GetElectors]"
									datamodel = "[CharacterSelectionList.GetList]"
									
									background = {
										using = Background_Area_Dark
										margin = { 10 2 }
										using = Mask_Rough_Edges
										alpha = 0.8
									}
									
									item = {
										container = {
											datacontext = "[CharacterListItem.GetCharacter]"
											datacontext = "[CharacterListItem.GetCharacter.GetPrimaryTitle]"
											datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"

											coa_realm_small_crown = {
												visible = "[And( GreaterThanOrEqualTo_int32( Title.GetTierFrame, '(int32)4' ), Character.GetGovernment.IsType('theocracy_government') )]"
												datacontext = "[SuccessionElectionWindowElector.GetElector.GetPrimaryTitle]"
												tooltip = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
											}	
										}
									}
								}
								expand = {}
							}
								
							hbox = {
								#layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding
																	
								icon = {
									size = { 50 50 }
									texture = "gfx/interface/icons/character_interactions/icon_vassal.dds"
									tooltip = "elector_lower_nobility"
								}
								background = {
									using = Background_Area_Light
									margin = {7 7}
									using = Mask_Rough_Edges
									alpha = 0.8
								}	
								spacer = { size = { 12 0 }}
								
								overlappingitembox = {
									name = "GG3a"  #feudal NOT powerful vassal, holder excluded
									#minimumsize = { 510 75 }
									size = { 510 75 }
									#maximumsize = { 510 75 }
									
									background = {
										using = Background_Area_Dark
										margin = { 10 2 }
										using = Mask_Rough_Edges
										alpha = 0.8
									}
														
									datacontext = "[SuccessionElectionWindow.GetElectors]"
									datamodel = "[CharacterSelectionList.GetList]"
									

									item = {
										container = {
											datacontext = "[CharacterListItem.GetCharacter]"
											datacontext = "[CharacterListItem.GetCharacter.GetPrimaryTitle]"
											datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"

											coa_realm_small_crown = {
												visible = "[And(Character.GetGovernment.IsType('feudal_government'), And(Not(Character.IsPowerfulVassal), Not(ObjectsEqual( Character.GetPrimaryTitle, SuccessionElectionWindow.GetTitle ) )))]"
												tooltip = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
											}
											visible = "[Objects( Character.GetPrimaryTitle, SuccessionElectionWindow.GetTitle )]" 
											
										}
									}
								}
								expand = {}
							}
							hbox = {
								#layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								icon = {
									size = { 50 50 }
									texture = "gfx/interface/icons/message_feed/bishop.dds"
									tooltip = "elector_lower_clergy"
								}
								background = {
									using = Background_Area_Light
									margin = {7 7}
									using = Mask_Rough_Edges
									alpha = 0.8
								}
								spacer = { size = { 12 0 }}
																		
								overlappingitembox = {
									name = "GG3b" #<duke clergy
									#minimumsize = { 510 75 }
									size = { 510 75 }
									#maximumsize = { 510 75 }
									
									background = {
										using = Background_Area_Dark
										margin = { 10 2 }
										using = Mask_Rough_Edges
										alpha = 0.8
									}
														
									datacontext = "[SuccessionElectionWindow.GetElectors]"
									datamodel = "[CharacterSelectionList.GetList]"
					
									item = {
										container = {
											datacontext = "[CharacterListItem.GetCharacter]"
											datacontext = "[CharacterListItem.GetCharacter.GetPrimaryTitle]"
											datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"

											coa_realm_small_crown = {
												visible = "[And( LessThanOrEqualTo_int32( Title.GetTierFrame, '(int32)3' ), Character.GetGovernment.IsType('theocracy_government') )]"
												tooltip = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
											}
										}
									}
								}
								expand = {}
								
							}
							hbox = {
								#layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding
								
								icon = {
									size = { 50 50 }
									texture = "gfx/interface/icons/message_feed/building.dds"
									tooltip = "elector_republics"
								}
								background = {
									using = Background_Area_Light
									margin = {7 7}
									using = Mask_Rough_Edges
									alpha = 0.8
								}
								spacer = { size = { 12 0 }}
								
								overlappingitembox = {
									name = "GG3c" #republics only
									#minimumsize = { 510 75 }
									size = { 510 75 }
									#maximumsize = { 510 75 }
									
									background = {
										using = Background_Area_Dark
										margin = { 10 2 }
										using = Mask_Rough_Edges
										alpha = 0.8
									}
														
									datacontext = "[SuccessionElectionWindow.GetElectors]"
									datamodel = "[CharacterSelectionList.GetList]"
					
									item = {
										container = {
											datacontext = "[CharacterListItem.GetCharacter]"
											datacontext = "[CharacterListItem.GetCharacter.GetPrimaryTitle]"
											datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( Character.Self )]"

											coa_realm_small_crown = {
												#visible = "[And( LessThanOrEqualTo_int32( Title.GetTierFrame, '(int32)3' ), Character.GetGovernment.IsType('republic_government') )]"
												visible = "[Character.GetGovernment.IsType('republic_government')]"
												tooltip = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
											}
										}
									}
								}
								expand = {}
							}
							spacer = { minimumsize = { 0 20}}
						}
					}
				}
				
									
			}		
		}

		#ONGLET 3
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_bottom = 5
			spacing = 10
			visible = "[GetVariableSystem.HasValue( 'election_view_tabs', 'electors' )]"
			#visible = "[GetVariableSystem.Exists('election_view_candidates')]"
			
			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[Not( Or( Character.IsValid, Title.IsPlayerElector ) )]"
				#margin_top = 20

				text_single = {
					text = "SUCCESSION_ELECTION_WINDOW_NOT_ELECTOR"
					default_format = "#warning"
				}
			}
			
				scrollbox = {
					name = "electorate"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					minimumsize = { 600 150}
					maximumsize = { 600 950}
					
					blockoverride "scrollbox_content" {
						name = "electorate1"
				
						fixedgridbox = {
							datacontext = "[SuccessionElectionWindow.GetElectors]"
							datamodel = "[CharacterSelectionList.GetList]"
							addcolumn = 580
							#addrow = 150
							addrow = 42		
							setitemsizefromcell = yes
							datamodel_reuse_widgets = yes
							spacing = 2
							
							item = {
								widget = {
									vbox = {
										datacontext = "[CharacterListItem.GetCharacter]"
										datacontext = "[SuccessionElectionWindow.GetElectorFromCharacter( Character.Self )]"

										#voter's name
										hbox = {
											layoutpolicy_horizontal = expanding
											margin = { 0 0 }
						
											coa_title_tiny = {
												datacontext = "[SuccessionElectionWindowElector.GetElector.GetPrimaryTitle]"
												tooltip = "[SuccessionElectionWindowElector.GetElector.GetPrimaryTitle.GetNameNoTooltip)]"
											}
					
											text_single = {
												margin = { 10 0 }
												layoutpolicy_horizontal = expanding
												text = "[Character.GetNameNoTooltip]"
												align = nobaseline
												max_width = 535
											}

											background = {
												using = Background_Frame
												margin = { 20 0}
											}
											hbox = {
												margin =  {30 0 }
												spacing = 5
												tooltip = "[SuccessionElectionWindow.GetElectorVoteStrengthBreakdown(SuccessionElectionWindowElector.GetElector)]"

												vote_strength_icon = {
												}

												icon = {
													visible = "[LessThanOrEqualTo_int32( SuccessionElectionWindowElector.GetVoteStrength, '(int32)1' )]"
														
													using = Background_Area_Light
													size = { 22 22 }
													#using = Mask_Rough_Edges
													texture = "gfx/interface/component_tiles/tile_editbox.dds"
													
													text_single = {
														text = "[SuccessionElectionWindowElector.GetVoteStrength|V]"
														position = { 8	 0 }
														align = nobaseline
													}
													
												}
												icon = {
													visible = "[EqualTo_int32( SuccessionElectionWindowElector.GetVoteStrength, '(int32)2' )]"
														
													using = Background_Area_Light
													size = { 22 22 }
													#using = Mask_Rough_Edges
													texture = "gfx/interface/component_tiles/tile_editbox.dds"
													
													text_single = {
														text = "[SuccessionElectionWindowElector.GetVoteStrength|V]"
														position = { 8	 0 }
														align = nobaseline
													}
													glow = {
														visible = "[EqualTo_int32( SuccessionElectionWindowElector.GetVoteStrength, '(int32)2' )]"
														glow_radius = 3
														using = Glow_Standard
														using = Color_Orange
														#using = Color_Blue
													}
													using = Animation_Glow_Pulse
												}
												icon = {
													visible = "[EqualTo_int32( SuccessionElectionWindowElector.GetVoteStrength, '(int32)3' )]"
														
													using = Background_Area_Light
													size = { 22 22 }
													#using = Mask_Rough_Edges
													texture = "gfx/interface/component_tiles/tile_editbox.dds"
													
													text_single = {
														text = "[SuccessionElectionWindowElector.GetVoteStrength|V]"
														position = { 8	 0 }
														align = nobaseline
													}
													
													glow = {
														visible = "[EqualTo_int32( SuccessionElectionWindowElector.GetVoteStrength, '(int32)3' )]"
														glow_radius = 4
														using = Glow_Standard
														using = Color_Orange
														#using = Color_Blue
													}
													using = Animation_Glow_Pulse
												}
												icon = {
													visible = "[EqualTo_int32( SuccessionElectionWindowElector.GetVoteStrength, '(int32)4' )]"
														
													using = Background_Area_Light
													size = { 22 22 }
													#using = Mask_Rough_Edges
													texture = "gfx/interface/component_tiles/tile_editbox.dds"
													
													text_single = {
														text = "[SuccessionElectionWindowElector.GetVoteStrength|V]"
														position = { 8	 0 }
														align = nobaseline
													}
													
													glow = {
														visible = "[EqualTo_int32( SuccessionElectionWindowElector.GetVoteStrength, '(int32)4' )]"
														glow_radius = 3
														using = Glow_Standard
														using = Color_Red
														#using = Color_Blue
													}
													using = Animation_Glow_Pulse
												}
												icon = {
													visible = "[GreaterThanOrEqualTo_int32( SuccessionElectionWindowElector.GetVoteStrength, '(int32)5' )]"
														
													using = Background_Area_Light
													size = { 22 22 }
													#using = Mask_Rough_Edges
													texture = "gfx/interface/component_tiles/tile_editbox.dds"
													
													text_single = {
														text = "[SuccessionElectionWindowElector.GetVoteStrength|V]"
														position = { 8	 0 }
														align = nobaseline
													}
													
													glow = {
														visible = "[GreaterThanOrEqualTo_int32( SuccessionElectionWindowElector.GetVoteStrength, '(int32)5' )]"
														glow_radius = 4
														using = Glow_Standard
														using = Color_Red
														#using = Color_Blue
													}
													using = Animation_Glow_Pulse
												}
											}
										}
									}
								}
							}	
						}
					}
				}	
			scrollbox = {
				name = "electors_list"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				
				minimumsize = { 600 150}
				maximumsize = { 600 950}
				
				blockoverride "scrollbox_content" {
					name = "electors"

					fixedgridbox = {
						datacontext = "[SuccessionElectionWindow.GetElectors]"
						datamodel = "[CharacterSelectionList.GetList]"
						addcolumn = 580
						addrow = 150
						setitemsizefromcell = yes
						datamodel_reuse_widgets = yes

						item = {
							widget = {
								vbox = {
									datacontext = "[CharacterListItem.GetCharacter]"
									datacontext = "[SuccessionElectionWindow.GetElectorFromCharacter( Character.Self )]"

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 0 5 }

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[Character.GetNameNoTooltip]"
											align = nobaseline
											max_width = 535
										}

										background = {
											using = Background_Area
										}
									}

									hbox = {
										layoutpolicy_horizontal = expanding

										portrait_head = {}

										container = {
											icon = {
												datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( SuccessionElectionWindowElector.GetElectorCandidate.GetCandidate )]"
												visible = "[EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
												position = { 1 1 }
												using = Mask_Rough_Edges
												texture = "gfx/interface/component_tiles/tile_editbox.dds"
												size = { 108 118 }
												glow = {
													glow_radius = 8
													using = Glow_Standard
													using = Color_Blue
												}
												using = Animation_Glow_Pulse
											}
											portrait_head = {
												datacontext = "[SuccessionElectionWindowElector.GetElectorCandidate.GetCandidate]"
											}
										}

										hbox = {
											layoutpolicy_horizontal = expanding


											vbox = {
												layoutpolicy_vertical = expanding
												margin_left = 10
												margin_bottom = -6

												vbox = {
													margin_left = 3

													text_single = {
														text = "SUCCESSION_ELECTION_WINDOW_CANDIDATE"
														layoutpolicy_horizontal = expanding
														align = left
													}
													container = {
														#icon = {
														#	datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( SuccessionElectionWindowElector.GetElectorCandidate.GetCandidate )]"
														#	visible = "[EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
														#	position = { -7 2 }
														#	using = Mask_Rough_Edges
														#	texture = "gfx/interface/component_tiles/tile_editbox.dds"
														#	size = { 60 24 }
														##	glow = {
														#		glow_radius = 6
														#		using = Glow_Standard
														#		using = Color_Orange
														#	}
														#	using = Animation_Glow_Pulse
														#}
														text_single = {
															visible = "[SuccessionElectionWindowElector.GetElectorCandidate.GetCandidate.IsValid]"
															text = "SUCCESSION_ELECTION_WINDOW_RANK"
															layoutpolicy_horizontal = expanding
															align = left
														}
													}
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													visible = "[SuccessionElectionWindowElector.GetElectorCandidate.GetCandidate.IsValid]"
													datacontext = "[SuccessionElectionWindow.GetCandidateFromCharacter( SuccessionElectionWindowElector.GetElectorCandidate.GetCandidate )]"
													spacing = 4

													tooltip = "SUCCESSION_ELECTION_WINDOW_CANDIDATE_SCORE"
													
													vote_amount_icon = {}
													
													text_single = {
														text = "[SuccessionElectionWindowCandidate.GetScore|V]"
														#visible = "[EqualTo_int32( SuccessionElectionWindowCandidate.GetElectionRank, '(int32)1' )]"
									
													}

													expand = {}
												}
											}

											spacer = {
												minimumsize = { 50 0 }
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												spacing = 5

												hbox = {
													spacing = 15

													hbox = {
														spacing = 5
														tooltip = "[SuccessionElectionWindow.GetElectorVoteStrengthBreakdown(SuccessionElectionWindowElector.GetElector)]"

														vote_strength_icon = {}

														text_single = {
															text = "[SuccessionElectionWindowElector.GetVoteStrength|V]"
															align = nobaseline
														}
													}

													hbox = {
														spacing = 5
														tooltipwidget = vote_reason_tooltip

														vote_chance_icon = {}

														text_single = {
															text = "[SuccessionElectionWindowElector.GetScoreDiff|+]"
															align = nobaseline
														}
													}
												}

												button_standard = {
													datacontext = "[SuccessionElectionWindowElector.GetElector]"
													text = "SUCCESSION_ELECTION_WINDOW_FORCE_VOTE"
													visible = "[And( Title.CanCharacterControlVote( Character.Self ), And( Title.IsPlayerElector, Character.IsPlayerInteractionShown( 'force_vote_in_succession_election_interaction' ) ) )]"
													enabled = "[Character.IsPlayerInteractionValid('force_vote_in_succession_election_interaction')]"
													tooltip = "[Character.GetPlayerInteractionTooltip('force_vote_in_succession_election_interaction')]"
													onclick = "[Character.OpenPlayerInteraction('force_vote_in_succession_election_interaction')]"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	
	window_character_filter = {
		datacontext = "[SuccessionElectionWindow.GetCandidates]"
		position = { 600 50 }

		blockoverride "addition_filter" {
			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter('range_filter')]"
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding

				datacontext = "[CharacterSelectionList.GetCategory('personal_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('ruler_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('adult_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('gender_filter')]"
					}

					divider = {
						layoutpolicy_horizontal = expanding
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('married_filter')]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('imprisoned_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('hook_filter')]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory('membership_filter_category')]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('religion_filter')]"
					}

					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('culture_filter')]"
					}


					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter('dynasty_filter')]"
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types SuccessionWindowTypes
{
	type vote_strength_icon = icon_flat_standard
	{
		texture = "gfx/interface/icons/flat_icons/election_vote_strength.dds"
		size = { 35 35 }
	}

	type vote_chance_icon = icon_flat_standard
	{
		texture = "gfx/interface/icons/flat_icons/election_preference_over_my_candidate.dds"
		size = { 35 35 }
	}

	type vote_amount_icon = icon_flat_standard
	{
		texture = "gfx/interface/icons/flat_icons/election_window.dds"
		size = { 40 40 }
	}

	type vbox_strength_info = vbox {
		name = "holy_order_strenght_info"
		layoutpolicy_horizontal = expanding
		spacing = 5
		margin = { 20 6 }

		background = {
			using = Background_Area
		}

		text_label_left = {
			name = "strength"
			layoutpolicy_horizontal = expanding
			text = "HIRED_TROOPS_STRENGTH"
			default_format = "#low"
		}

		hbox = {
			spacing = 50

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 3

				text_single = {
					name = "soldiers_count"
					default_format = "#high"
					using = Font_Size_Big

					block "hired_troops_soldiers" {
						text = "TITLE_VIEW_HO_NUMBER_OF_SOLDIERS"
					}
				}

				progressbar_standard = {
					name = "strength_bar"
					size = { 145 25 }

					block "strength_values" {
						value = "[CurrentAndMaxToProgressbarValueInt32( HolyOrder.GetCurrentSoldiers, HolyOrder.GetMaxSoldiers)]"
					}
				}
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				name = "knights_count"
				default_format = "#high"
				using = Font_Size_Big

				block "hired_troops_knights" {
					text = "TITLE_VIEW_HO_NUMBER_OF_KNIGHTS"
				}
			}
		}
		expand = {
			size = { 1 40 }
		}
	}
}

local_template vote_reason_tooltip
{
	container = {
		alwaystransparent = no

		widget = {
			name = "background"
			using = Background_Tooltip
			size = { 100% 100% }
			alwaystransparent = no
		}

		container = {
			visible = "[And( Title.CanCharacterControlVote(Character.Self), SuccessionElectionWindow.GetTitle.GetPlayerNominee.IsValid )]"

			flowcontainer = {
				visible = "[Not(Character.IsPlayer)]"

				direction = vertical
				margin = { 10 10 }
				ignoreinvisible = yes

				flowcontainer = {
					direction = horizontal
					ignoreinvisible = yes

					flowcontainer = {
						margin = { 10 5 }
						direction = vertical

						background = {
							using = Background_Area
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 370 -1 }
							maximumsize = { 370 -1 }
							multiline = yes
							text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_NOMINEE_TT"
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 370 -1 }
							maximumsize = { 370 -1 }
							multiline = yes
							fonttintcolor = "[TooltipInfo.GetTintColor]"
							text = "[SuccessionElectionWindow.GetVoteReasonBreakdown( SuccessionElectionWindow.GetElectorFromCharacter( Character.Self ).GetElectorCandidate.GetCandidate, Character.Self )]"
						}
					}

					widget = {
						visible = "[Not( SuccessionElectionWindowElector.IsVoteForPlayer )]"
						size = { 5 0 }
					}

					flowcontainer = {
						visible = "[Not( SuccessionElectionWindowElector.IsVoteForPlayer )]"
						margin = { 10 5 }
						direction = vertical
						ignoreinvisible = yes

						background = {
							using = Background_Area
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 370 -1 }
							maximumsize = { 370 -1 }
							multiline = yes
							text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_PLAYER_NOMINEE"
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						text_multi = {
							autoresize = yes
							minimumsize = { 370 -1 }
							maximumsize = { 370 -1 }
							multiline = yes
							fonttintcolor = "[TooltipInfo.GetTintColor]"
							text = "[SuccessionElectionWindow.GetPlayerCandidateVoteReasonBreakdown( Character.Self )]"
						}
					}
				}

				text_multi = {
					margin = { 5 0 }
					visible = "[SuccessionElectionWindow.CouldVoteForPlayerCandidateInstead( Character.Self )]"
					text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_PLAYER_NOMINEE_INFO"
					autoresize = no
					max_width = 520
					size = { 100% 50 }
					fonttintcolor = "[TooltipInfo.GetTintColor]"
				}
			}

			text_multi = {
				visible = "[Character.IsOtherPlayer]"

				margin = { 10 5 }
				align = left|nobaseline
				autoresize = yes
				minimumsize = { 390 -1 }
				maximumsize = { 390 -1 }

				text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_IS_OTHER_PLAYER"
				fonttintcolor = "[TooltipInfo.GetTintColor]"
			}

			text_multi = {
				visible = "[Character.IsLocalPlayer]"

				margin = { 10 5 }
				align = left|nobaseline
				autoresize = yes
				minimumsize = { 390 -1 }
				maximumsize = { 390 -1 }
				text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_IS_LOCAL_PLAYER"
				fonttintcolor = "[TooltipInfo.GetTintColor]"
			}
		}

		text_multi = {
			visible = "[Not( Title.CanCharacterControlVote( Character.Self ) )]"

			margin = { 10 5 }
			align = left|nobaseline
			autoresize = yes
			minimumsize = { 390 -1 }
			maximumsize = { 390 -1 }
			text = "SUCCESSION_ELECTION_WINDOW_VOTE_BREAKDOWN_FORCED_VOTE"
			fonttintcolor = "[TooltipInfo.GetTintColor]"
		}

		text_single = {
			visible = "[Not( SuccessionElectionWindow.GetTitle.GetPlayerNominee.IsValid )]"
			margin = { 10 10 }
			text = "SUCCESSION_ELECTION_WINDOW_NO_PLAYER_NOMINEE"
		}
	}
}


## Default values for House CoA buttons
template CoA_House_Defaults
{
	block "coa_button"
	{
		block "coa_tooltip"
		{
			tooltipwidget = {
				using = dynasty_house_tooltip_BIS
			}
		}
		onclick = "[DefaultOnHouseCoatOfArmsClick(DynastyHouse.GetID)]"
	}
}
template dynasty_house_tooltip_BIS {
	object_tooltip_pop_out = {
		datacontext = "[DynastyHouse]"

		blockoverride "header_additions" {
			margin_right = 10
			margin_top = 8
			margin_left = -4

			coa_house_small = {
				blockoverride "coa_tooltip" {}
			}
		}

		blockoverride "title_text" {
			text = "HOUSE_TT_NAME"
		}

		blockoverride "subtitle_text" {
			margin_top = -4
			text = "HOUSE_VIEW_MOTTO"
			default_format = "#weak"
		}

		blockoverride "concept_link" {
			text = [house|E]
		}
		blockoverride "extra_data" {
			cooltip_paragraph = {
				name = "my_house"
				visible = "[DynastyHouse.IsPlayerMember]"
				text = "HOUSE_VIEW_PLAYER_IS_MEMBER"
			}

			cooltip_paragraph = {
				name = "house_head"
				text = "DYNASTY_HOUSE_TT_HEAD_OF_HOUSE"
			}
			cooltip_paragraph = {
				name = "living_members"
				text = "DYNASTY_HOUSE_TT_LIVING_MEMBERS"
			}

			cooltip_paragraph = {
				name = "dynasty"
				text = "DYNASTY_HOUSE_TT_DYNASTY"
			}
			cooltip_paragraph = {
				name = "dynasty_level"
				text = "DYNASTY_HOUSE_TT_DYNASTY_LEVEL"
			}

			cooltip_paragraph = {
				name = "click"
				text = "VIEW_CLICK_COA"
				default_format = "#I"
			}
		}
	}
}