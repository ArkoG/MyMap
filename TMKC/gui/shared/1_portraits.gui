types PortraitTypes
	{
    type portrait_hud = portrait_button {
        name = "tutorial_highlight_bottom_left_portrait_button"
        visible = "[Not(GetVariableSystem.Exists( 'lifestyle_open' ))]"
        size = { 300 540 }

        gfxtype = portraitbuttongfx
        shaderfile = "gfx/FX/jomini/gui_portrait.shader"
        effectname = "NoHighlight"

        state = {
            name = _mouse_enter
            on_start = "[Character.OnMouseEnter]"
            scale = 1.05
            using = Animation_Curve_Default
            duration = 0.05
        }

        state = {
            name = _mouse_leave
            on_start = "[Character.OnMouseLeave]"
            using = Animation_Curve_Default
            duration = 0.05
            scale = 1
        }

        state = {
            name = _mouse_release
            start_sound = {
                soundeffect = "event:/SFX/UI/Character/sfx_ui_character_portrait_select"
            }
        }

        onclick = "[DefaultOnCharacterClick(Character.GetID)]"
        onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
        button_ignore = none

        clicksound = "event:/SFX/UI/Character/sfx_ui_character_portrait_select"
        oversound = "event:/SFX/UI/Character/sfx_ui_character_portrait_pointer_over"

        portrait_texture = "[Character.GetAnimatedPortrait('environment_hud', 'camera_lifestyles', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
        background_texture = "gfx/portraits/portrait_transparent.dds"
        texture = "gfx/portraits/portrait_transparent.dds"
        mask = "gfx/portraits/portrait_mask_blank.dds"

        highlight_icon = {
            name = "prison_bars"
            visible = "[Character.IsImprisoned]"
            size = { 100% 100% }
            effectname = "NoHighlight"
            texture = "gfx/portraits/portrait_prison_shoulders.dds"
            position = { 25 0 }

            modify_texture = {
                name = "mask"
                texture = "gfx/portraits/portrait_mask_head.dds"
                spriteType = Corneredstretched
                blend_mode = alphamultiply
                rotate_uv = 180
            }
        }

        using = tooltip_es
        # tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
        tooltip_enabled = no

        tooltipwidget = {
            cooltip_type = {
                blockoverride "interaction_info"
                {
                    text = "CHARACTER_TOOLTIP_INSTRUCTION"
                }
            }
        }

        tooltip_offset = { -10 0 }
        tooltip_verticalbehavior = slide
        tooltip_horizontalbehavior = mirror
    }

}